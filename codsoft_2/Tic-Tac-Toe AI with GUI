import tkinter as tk
from tkinter import messagebox
import numpy as np

# Tic-Tac-Toe Board
board = np.array([[" "]*3 for _ in range(3)])

# Minimax Algorithm for AI
def minimax(board, is_maximizing):
    winner = check_winner()
    if winner == "X":
        return -1
    elif winner == "O":
        return 1
    elif " " not in board:
        return 0

    if is_maximizing:
        best_score = -float("inf")
        for row in range(3):
            for col in range(3):
                if board[row][col] == " ":
                    board[row][col] = "O"
                    score = minimax(board, False)
                    board[row][col] = " "
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = float("inf")
        for row in range(3):
            for col in range(3):
                if board[row][col] == " ":
                    board[row][col] = "X"
                    score = minimax(board, True)
                    board[row][col] = " "
                    best_score = min(score, best_score)
        return best_score

# AI Chooses Best Move
def best_move():
    best_score = -float("inf")
    move = None
    for row in range(3):
        for col in range(3):
            if board[row][col] == " ":
                board[row][col] = "O"
                score = minimax(board, False)
                board[row][col] = " "
                if score > best_score:
                    best_score = score
                    move = (row, col)
    return move

# Check for Winner
def check_winner():
    for row in board:
        if all(cell == "X" for cell in row):
            return "X"
        if all(cell == "O" for cell in row):
            return "O"

    for col in range(3):
        if all(board[row][col] == "X" for row in range(3)):
            return "X"
        if all(board[row][col] == "O" for row in range(3)):
            return "O"

    if all(board[i][i] == "X" for i in range(3)) or all(board[i][2 - i] == "X" for i in range(3)):
        return "X"
    if all(board[i][i] == "O" for i in range(3)) or all(board[i][2 - i] == "O" for i in range(3)):
        return "O"

    return None

# Handle Player Click
def on_click(row, col):
    global board
    if board[row][col] == " ":
        board[row][col] = "X"
        buttons[row][col].config(text="X", state=tk.DISABLED)

        winner = check_winner()
        if winner:
            messagebox.showinfo("Game Over", f"{winner} wins!")
            reset_game()
            return

        if " " in board:
            ai_move = best_move()
            if ai_move:
                board[ai_move] = "O"
                buttons[ai_move[0]][ai_move[1]].config(text="O", state=tk.DISABLED)

                winner = check_winner()
                if winner:
                    messagebox.showinfo("Game Over", f"{winner} wins!")
                    reset_game()
                    return

# Reset Game
def reset_game():
    global board
    board = np.array([[" "]*3 for _ in range(3)])
    for row in range(3):
        for col in range(3):
            buttons[row][col].config(text=" ", state=tk.NORMAL)

# GUI Setup
root = tk.Tk()
root.title("Tic-Tac-Toe AI")

buttons = [[None]*3 for _ in range(3)]
for row in range(3):
    for col in range(3):
        buttons[row][col] = tk.Button(root, text=" ", font=("Arial", 20), width=5, height=2,
                                      command=lambda r=row, c=col: on_click(r, c))
        buttons[row][col].grid(row=row, column=col)

reset_button = tk.Button(root, text="Restart Game", font=("Arial", 14), command=reset_game)
reset_button.grid(row=3, column=0, columnspan=3)

root.mainloop()
